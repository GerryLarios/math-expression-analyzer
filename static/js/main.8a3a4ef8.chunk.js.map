{"version":3,"sources":["Buttons.js","Record.js","helpers/validators.js","helpers/Analyzer.js","Calculator.js","helpers/helpers.js","App.js","serviceWorker.js","index.js"],"names":["DigitButton","digit","onClick","className","OperatorButton","operation","HandlerButton","action","Record","expression","result","isMathOperation","str","test","isNumber","char","isOperator","operations","operator","left","right","takeExpression","queue","shift","analyzer","mathExpression","length","number","unshift","calculateExpressionQueue","aux","push","orderExpressionQueue","elements","i","Number","stringToElements","Calculator","props","renderDigits","size","startAt","Array","keys","map","range","key","handleDigitButton","bind","renderHistory","state","history","index","handleHistoryRecord","main","preview","this","setState","concat","updatePreview","slice","target","value","type","onChange","handleOperation","readOnly","handleDelete","handleEqual","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a3a4ef8.chunk.js","sourcesContent":["import React from \"react\";\n\n\nexport function DigitButton({ digit, onClick }) {\n    return(\n        <button className=\"btn digit\" onClick={() => onClick(digit)}>\n            {digit}\n        </button>\n    )\n}\n\nexport function OperatorButton({ operation, digit, onClick }) {\n    return(\n        <button className=\"btn operator\" onClick={() => onClick(operation)}>\n            {digit}\n        </button>\n    )\n}\n\nexport function HandlerButton({ action, onClick }) {\n    return (\n        <button className=\"btn handler\" onClick={onClick}>\n            {action}\n        </button>\n    )\n}","import React from \"react\";\n\nexport default function Record({ expression, result, onClick }) {\n    return (\n        <div className=\"record\" onClick={onClick}>\n            <p className=\"expression\">{expression}</p>\n            <p className=\"result\">{result}</p>\n        </div>\n    )\n}","export function isMathOperation(str) {\n    return /[0-9*+-/]*/.test(str) && !/[*+-/.]{2,}/.test(str);\n}\n\nexport function isNumber(char) {\n    return /[0-9]/.test(char);\n}\n\nexport function isDot(char) {\n    return /[.]/.test(char);\n}\n\nexport function isOperator(char) {\n    return /[/*+-]/.test(char);\n}\n\nexport function isHighPriority(char) {\n    return char === \"*\" || char === \"/\" ? true : false;\n}\n\nexport function isEmpty(str) {\n    return (!str || /^\\s*$/.test(str));\n}","import { isOperator, isHighPriority } from \"./validators\";\n\nfunction stringToElements(mathExpression) {\n    let elements = [];\n    let number = \"\";\n    for (let i = 0; i < mathExpression.length; i++) {\n        const char = mathExpression[i];\n        if (isOperator(char)) {\n            elements.push(Number(number), char);\n            number = \"\";\n        } else number += char;\n    }\n    elements.push(Number(number));\n    return elements;\n}\n\nfunction operations(operator, left, right) {\n    switch (operator) {\n        case \"*\":\n            return left * right;\n        case \"/\":\n            return left / right;\n        case \"+\":\n            return left + right;\n        case \"-\":\n            return left - right;\n        default:\n            return null;\n    }\n}\n\nfunction takeExpression(queue) {\n    return [ queue.shift(), queue.shift() ];\n}\n\nfunction orderExpressionQueue(queue) {\n    let aux = [];\n    while (queue.length) {\n        const [number, operator] = takeExpression(queue);\n        if (isHighPriority(operator))\n            queue.unshift(operations(operator, number, queue.shift()))\n        else\n            operator ? aux.push(number, operator) : aux.push(number);\n    }\n    return aux;\n}\n\nfunction calculateExpressionQueue(queue) {\n    while (queue.length !== 1) {\n        const [number, operator] = takeExpression(queue);\n        queue.unshift(operations(operator, number, queue.shift()));\n    }\n    return queue[0];\n}\n\nexport default function analyzer(mathExpression) {\n    let queue = stringToElements(mathExpression);\n    const orderedQueue = orderExpressionQueue(queue);\n    return calculateExpressionQueue(orderedQueue);\n}","import React, { Component } from \"react\";\n\nimport { DigitButton, OperatorButton,  HandlerButton } from \"./Buttons\";\nimport Record from \"./Record\";\n\nimport { range } from \"./helpers/helpers\";\nimport { isMathOperation, isNumber, isEmpty } from \"./helpers/validators\";\nimport analyzer from \"./helpers/Analyzer\";\n\nclass Calculator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            main: \"\",\n            preview: \"\",\n            history: []\n        }\n    }\n\n    updatePreview() {\n        const main = this.state.main;\n        if (isEmpty(main))\n            this.setState({ preview: \"\" })\n        else if (isNumber(main[0]) && isNumber(main[main.length - 1]))\n            this.setState({ preview: analyzer(main) });\n    }\n\n    handleEqual(){\n        const result = this.state.preview;\n        const expression = this.state.main;\n        const history = this.state.history;\n        this.setState({\n            main: \"\" + result,\n            history: history.concat([ { result, expression } ])\n        }, this.updatePreview);\n    }\n\n    handleDelete() {\n        const main = this.state.main.slice(0, -1);\n        this.setState({ main }, this.updatePreview);\n    }\n\n    handleOperation({ target }) {\n        const main = target.value\n        if (isMathOperation(main))\n            this.setState({ main }, this.updatePreview);\n    }\n\n    handleDigitButton(value) {\n        const main = this.state.main + value;\n        if (isMathOperation(main))\n            this.setState({ main }, this.updatePreview);\n    }\n\n    handleHistoryRecord(expression, result) {\n        this.setState({ main: expression, preview: result });\n    }\n\n    renderDigits = () => range(9, 1).map( digit => {\n        return <DigitButton key={digit} digit={digit} onClick={this.handleDigitButton.bind(this)} />\n    });\n\n    renderHistory = () => this.state.history.map(({expression, result}, index) => {\n        return <Record\n                    key={index} \n                    expression={expression} \n                    result={result}\n                    onClick={() => this.handleHistoryRecord(expression, result)} />\n    });\n\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <div className=\"calculator\">\n                    <div className=\"displays\">\n                        <input \n                            className=\"display main\" \n                            type=\"text\" \n                            value={this.state.main}\n                            onChange={this.handleOperation.bind(this)}/>\n                        <input \n                            className=\"display preview\" \n                            type=\"text\" \n                            readOnly \n                            value={this.state.preview}/>\n                    </div>\n                    <div className=\"input-wrap\">\n                        <div className=\"digits\">\n                            <DigitButton \n                                digit={0} \n                                onClick={this.handleDigitButton.bind(this)}/>\n                            <button \n                                className=\"btn digit dot\"\n                                onClick={() => this.handleDigitButton(\".\")}>•</button>\n                            {this.renderDigits()}\n                        </div>\n                        <div className=\"operations\">\n                            <OperatorButton\n                                digit=\"÷\"\n                                operation=\"/\" \n                                onClick={this.handleDigitButton.bind(this)}/>\n                            <OperatorButton\n                                digit=\"×\"\n                                operation=\"*\" \n                                onClick={this.handleDigitButton.bind(this)}/>\n                            <OperatorButton\n                                digit=\"−\"\n                                operation=\"-\" \n                                onClick={this.handleDigitButton.bind(this)}/>\n                            <OperatorButton\n                                digit=\"+\"\n                                operation=\"+\" \n                                onClick={this.handleDigitButton.bind(this)}/>\n                        </div>\n                        <div className=\"handlers\">\n                            <HandlerButton\n                                action=\"C\" \n                                onClick={this.handleDelete.bind(this)} />\n                            <HandlerButton \n                                action=\"=\" \n                                onClick={this.handleEqual.bind(this)} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"history\">\n                    <p className=\"history-header\">History</p>\n                    {this.renderHistory()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Calculator;","export function range(size = 10, startAt = 0) {\n    return [...Array(size).keys()].map(i => i + startAt);\n}","import React from 'react';\nimport './App.css';\n\nimport Calculator from \"./Calculator\";\n\nfunction App() {\n    return(\n        <div>\n            <Calculator />\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}